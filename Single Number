Given a non-empty array of integers nums, every element appears twice except for one.
Find that single one.
You must implement a solution with a linear runtime complexity and use only constant extra space.

 #############################################################################################################

Example 1:

Input: nums = [2,2,1]
Output: 1

Example 2:

Input: nums = [4,1,2,1,2]
Output: 4

Example 3:

Input: nums = [1]
Output: 1


#############################################################################################################

Solution:

class Solution
{
    public int singleNumber(int[] nums)
    {
        int len = nums.length;
        HashMap<Integer, Integer> map = new HashMap<Integer,Integer>();
        for(int i=0; i<len; ++i)
        {
            int value = map.getOrDefault(nums[i],0)+1;
            map.put(nums[i], value );            
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet())
        {
           if (entry.getValue()==1)
           {
               return entry.getKey();     
           }
        }
        return 0;
        
    }
}
